continue
continie
self.photo
self
  photo.file
  photo
continue
@message.photo
@message.photo.valid?
@message.photo
@message.phot
@message.valid?
continue
@message.valid?
@message
continue
self.valid?
self
photo.file
photo
self.valid?
continue
document_type
self.photo
params
photo_type
photo
self
document_type
continue
photo.file.size.to_f/(1000*1000)
photo.file.size.to_f
continue
params
continue
@message.photo
 @message = Message.new(message_params)
continue
message_params
params
continue
params
continue
    params
exit
 params
exit
continue
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
exit
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
exit
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
body
exit
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
exit
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
message
body
exit
User.all.where.not(id: message.user.id).joins(:user_channels).where(user_channels: {channel_id: message.channel_id }).first
message = Message.create(body: body, channel_id: 3, user: user, building: channel.building)
body
exit
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
user = User.all.where.not(id: message.user.id).joins(:user_channels).where(user_channels: {channel_id: message.channel_id }).last
message = Message.create(body: "Test", channel_id: 3, user: User.first, building: channel.building)
exit
message.destroy
Mailer::UserMailerWorker.perform_async(:new_message, message_id: message.id, user_id: user.id)
Building.find(4)
building.find(4)
User.all.where.not(id: message.user.id).joins(:user_channels).where(user_channels: {channel_id: message.channel_id }).count
message = Message.create(body: "Test", channel_id: 3, user: User.first)
channel
exit
Channel.pluck(:building_id)
UserChannel.last.channel
UserChannel.pluck(:channel_id)
UserChannel.count
User.all.where.not(id: message.user.id).joins(:user_channels).where(user_channels: {channel_id: message.channel_id }).count
message = Message.create(body: "Test", channel_id: 3, user: User.first)
user
exit
User.all.where.not(id: @message.user.id).joins(:user_channels).where(user_channels: {channel_id: @message.channel_id })
User.joins(:user_channels).where(user_channels: {channel_id: @message.channel_id })
@message
User.joins(:user_channels)
Channel.count
UserChannel.destroy_all
Channel.find(23)
Channel.find(20)
other_user_channels
user_channels
 channel
continue
 channel
 channel.any?
continue
@message.building_id
current_user.building_id
current_user.buiding
current_user
continue
User.all.last(2)
  User.all
exit
 User.all.last(2).first
 User.all.last(2)
 User.all.last(2).reverse
exit
   User.last
   User.last.image_id
   User.last.image_id + 1
exit
current_user
 @comment
exit
@comment = message.comments.build(comment_params)
params
continue
params
ontinue
continue
@building_name
continue
@building_name = @message.user.building.name
 @message.user.building.name
exit
conccon
 continue
continue
  @user.building_id
continue
resource
@user
continue
 errors
errors.add(:building_access)
 errors
continue
 errors
return false
building_id
building_access
continue
building_access
first_name
building_id
exit
self
 building_id
continue
response.status = 404
response.status
JSON.parse(response.status)
JSON.parse(response.body)
continue
JSON.parse(response.body)
continue
response.body = parsed_body.to_json
parsed_body
parsed_body["errors"]["building_acces"] = ["Le mot de passe n'est pas valide"] 
paresed_body["errors"]["building_acces"] = ["Le mot de passe n'est pas valide"] 
parsed_body = JSON.parse(response.body)
paresed_body["errors"]["building_acces"] = ["Le mot de passe n'est pas valide"] parsed_body = JSON.parse(response.body)
parsed_body = JSON.parse(response.body)
continue
building_name
exit
continue
error
continueddadadaddddad
continue
@user.errors.messages[:building_acces] = ["Le mot de passe est invalide"]
continue
@user.errors.messages
@user.errors.messages[:building_acces] = ["Le mot de passe est invalide"]
user.errors.messages[:building_acces] = ["Le mot de passe est invalide"]
@user.errors.messages
@user.errors.messages[:building_acces]@user.errors.messages[:building_acces]d@user.errors.messages[:building_acces]ddddda
     continue
continue
stored_location_for(resource) 
 request.env['omniauth.origin']
 request.env['omniauth.origin'] || stored_location_for(resource) || root_path
exit
session[:previous_url]
exit
Notifier.new_user(current_user)
exit
Notifier.new_user(current_user)
current_user
Notifier.new_user
Notifier
Notfier
Notier
exit
Notifier
exit
Notifier
Notifier.new_user(current_user)
