exit
building_id_was.nil?
    building_id_changed?
    building_id_was
    building_id
    building_id_was
    building_id_was?
exit
end
  UserChannel.where(id: dup).destroy_all if dup
  dup = (a.detect{ |e| a.count(e) > 1 }).try(:uniq)
  a = user.user_channels.pluck(:channel_id)
User.last(10).each do |user|
end
  p dup
  dup = (a.detect{ |e| a.count(e) > 1 }).try(:uniq)
  a = user.user_channels.pluck(:channel_id)
User.last(10).each do |user|
end
  p dup
  dup = a.detect{ |e| a.count(e) > 1 }.try(:uniq)
  a = user.user_channels.pluck(:channel_id)
endUser.last(10).each do |user|
  p dup = a.detect{ |e| a.count(e) > 1 }.try(:uniq)
  a = user.user_channels.pluck(:channel_id)
endUser.last(10).each do |user|
  p dup = a.detect{ |e| a.count(e) > 1 }.try(:uniq)
  a = user.user_channels.pluck(:channel_id)
User.last(10).each do |user|
end
  p dup = a.detect{ |e| a.count(e) > 1 }.try(:uniq)
  a = user.user_channels.pluck(:channel_id)
User.last(10).each do |user|
continue
exit
self
continue
message_validated
exit
params["users"]["user_info"].values.first["email"]
params["users"]["user_info"].values.first
params["users"]["user_info"].values
params["users"]["user_info"].keys
params["users"]["user_info"]
exit
params
 params["users"]["user_info"].values
exit
params["users"]["user_info"].values.first
params["users"]["user_info"].values.last
params["users"]["user_info"].values
params["users"]["user_info"].value
params["users"]["user_info"].first
params["users"]["user_info"]
password
 user_id
 users_id
continue
      params["users"]["user-info"].first
      params["users"]["user-info"]
      params["users"]
      params["users"]["user-infos"]
      params["users"]["user_infos"]
      params["user_infos"]
      params[:user_infos]
continue
password
continue
password
exit
Channel.where(channel_type: "main_group", building_id: self.building.id)
exit
self.update(building_access: self.building.building_access)
self
exit
Channel.where(channel_type: "main_group", building_id: self.building.id)
Channel.where(channel_type: "main_group"_
self.user_channels.each {|u| u.channel.channel_type }
self.user_channels.joins(:channel).where('channels.channel_type = ?', "main_group")
self.user_channels.joins(:channel).where('channels.channel_type = "main_group"')
self.user_channels.joins(:channel).where('channels.channel_type= "main_group"')
self.user_channels.each {|u| u.channel.channel_type }
 self.user_channels.map {|u| u.channel.channel_type }
 self.user_channels.last.channel
 self.user_channels
exit
self.user_channels.each do |channel| p channel.channel.channel_type end
self.user_channels.each do |channel| p channel.channel_type end
self.user_channels.each do |channel|
self.user_channels
self.user_channels.joins(:channel)
self.user_channels
self.user_channels.joins(:channel).where('channels.channel_type= "main_group"')
self.user_channels.joins(:channel).where(channel_type: "main_group")
self.user_channels
self
Building.last
self.building
self
exit
@user.update(user_params)
exit
@user.update(user_params)
exit
@user.errors
@user.update(user_params)
user_params
         @user.valid?
         @user
exit
@users.last.building
@users.last
@users
 continue
exit
options
continue
options
value
   field
exit
yield(:title)
yield.title
yield
yield(:title)
continue
current_user.photo.url
current_user.photo.url(:thumb)
http://res.cloudinary.com/dyp0skivf/image/upload/c_fill,h_200,w_200/v1473014789/pgjhjqvan6zosh9x3azm.jpg
current_user.photo.url(:thumb)
  continue
 exit
  model.is_a?(User)
  model
continue
exit
@user.update(user_params)
@user.update(door: 155, floor: 5)
@user.errors
@user.update(door: 3)
@user.errors
@user.update(user_params)
  @user = User.find(current_user.id)
exit
self.vote_for_option_1
self.vote_for_option_1 = self.vote_for_option_1 - [id]
self.vote_for_option_1
vote_for_option_1
self
vote_for_option_3
vote_for_option_2
  vote_for_option_1
continue
vote_for_option_3
vote_for_option_2
  vote_for_option_1
continue
 @building.name
continue
 @building.name
 @building
exit
exi
Channel.last
self
 Message.create(body: Building.welcome, building_id: self.id, user_id: User.admin.id)
